{==============================================================================\
|                             Draynor Chop N' Bank                             |
|                                  By: Coh3n                                   |
|==============================================================================|
|                                                                              |
|      Written By: Coh3n                                                       |
|      Description: Cuts Willow/Oak trees in Draynor and banks the logs        |
|      Contact Info: Private message via Villavu.com                           |
|                                                                              |
|      Many more scripts of various types can be found at VillaVu.com!         |
 \_____________________________________________________________________________}

{==============================================================================\
|                              Setup Instructions                              |
|==============================================================================]
|                                                                              |
|       1. Have hatchet in FIRST inventory slot or equipped                    |
|       2. Start in Draynor bank OR at the trees                               |
|       3. Hit run in Simba                                                    |
|       4. Fill out the player form (hover boxes for hints)                    |
|       5. Hit the "Start Script" button on the player setup tab               |
|       6. Post any progress reports and/or bugs!                              |
 \_____________________________________________________________________________}

{==============================================================================\
|                                   Features                                   |
|==============================================================================|
|                                                                              |
|     * Custom PlayerForm             * AntiRandoms/Antiban                    |
|     * Custom signature              * Supports ANY hatchet                   |
|     * Detailed progress report      * Efficient tree finding/banking         |
|     * Breaking/player switching     * Detects and records levels gained      |
|     * Supports Oaks/Willows         * Plus many more!                        |
|     * Unlimited number of players                                            |
 \_____________________________________________________________________________}

{==============================================================================|
|                                    Credits                                   |
|==============================================================================|
|                                                                              |
|     * Nava2 -> for the autocoloring functions                                |
|     * Zeph -> for all the help and putting up with my noobish questions      |
|     * Markus -> for the same reasons as Zeph                                 |
|     * Rasta Magician -> for creating the headers                             |
|     * Everyone who helped me on the forums/IRC                               |
|     * Everyone who has posted progress reports and/or bugs                   |
 \_____________________________________________________________________________}

program DraynorChopNBank;
{$DEFINE SMART}
{$i SRL-6/SRL.simba}

const
  SCRIPT_VERSION  = '76';

{ const Walk Constants;
  Description: Constants representing different types of walks }
const
  WALK_TREES_WILLOWS = 0;
  WALK_TREES_OAKS    = 1;
  WALK_BANK_WILLOWS  = 3;
  WALK_BANK_OAKS     = 4;

{ const Debug Constants;
  Description: Constants representing the different forms of debugging }
const
  DEBUG_ERROR   = 0;
  DEBUG_SUCCESS = 1;
  DEBUG_DETAILS = 2;
  DEBUG_PLAYER  = 3;

{ const Players.Integers Indexes;
  Description: Constants representing the DeclarePlayers integers. }
const
   // Integers.
   P_TOTAL_LOGS  = 0;

   // Booleans.
   P_TAKE_BREAKS = 0;
   P_EQUIPPED    = 1;

   // Strings.
   P_TREE       = 0;

   // Progress report.
   P_LOADS  = 9;
   P_LOGS   = 10;
   P_LEVELS = 11;
   P_EXP    = 12;
   P_BREAKS = 13;

{ type TTree record;
  Description: A type used for loading different trees }
type
  TTree = record
    Name   : String;
    UpText : TStringArray;
    Color  : Integer;
    Hue    : Extended;
    Sat    : Extended;
    Exp    : Extended;
    Tol    : Integer;
    Symbol : Integer;
    OffsetX: Integer;
    OffsetY: Integer;
  end;

{ var Global;
  Description: Global variables used throughout the script }
var
  playerLoads: Integer;
  falseReason: Array of String; // holds reasons why players turned false
  breakAfter: Integer;

{==============================================================================\
|                               Script Setup                                   |
|==============================================================================|
|                                                                              |
|    * To setup the script and your players.                                   |
 \_____________________________________________________________________________}

{ const Setup;
  Description: Constants used to setup the script }
const
  STATS_ID   = 'Coh3n';      // Your SRL Stats Username
  STATS_PASS = '304002';      // Your SRL Stats Password
  BREAK_AFTER  = 20;    // Loads until break/switch player
  SMART_DRAWING = true; // Does some debugging on SMART
  SRL_LOG = false;       // Saves SRL debug to a log file
  SRL_DEBUG = true;     // Debugs SRL procedures in the debug box
  IP_SCREEN = false;     // Takes a screenshot of your last IP in case of hacks
  MAX_TIME_PER_TREE = 60; // Will move on to another tree after about X seconds not matter what
  ANIMATION_SHIFT = 300; // The maximum player IDLE pixel shift. Can adjust value if player isn't moving between trees or moving too soon.

procedure DeclarePlayers; // Where all your players are to be setup
begin
  Players.Setup(['Kryptov'], 'Skillers');
  CurrentPlayer := 0;

  with Players[0] do
  begin
    Integers[P_TOTAL_LOGS]  := 1000;    // Total logs to cut
    Booleans[P_TAKE_BREAKS] := True; // True = the player will take breaks
    Booleans[P_EQUIPPED]    := False; // True = your hatchet is equipped (if not equipped, must be in first backpack slot)
    Strings[P_TREE]         := 'Willow';   // Either 'willow' or 'oak'
  end;
end;

procedure DCnB_Signature;
begin
  ClearDebug;
  Writeln('                                            ___          ');
  Wait(100);
  Writeln('                       ____                /\__\         ');
  Wait(100);
  Writeln('                      /\___\     ____      \/ _/         ');
  Wait(100);
  Writeln('       _____          \/_  /    /\___\      \/ _____     ');
  Wait(100);
  Writeln('      /\____\  _______/ / /___ _\/___ \_____  /\____\    ');
  Wait(100);;
  Writeln('     / /  ___\/\______\/ /____\\____/ /_____\/ / ____\   ');
  Wait(100);
  Writeln('    / /  /__ / / ___  / ____  //___  / ____  \/ /___\    ');
  Wait(100);
  Writeln('   / /  /___\ / /__/ / / / / /____/ / /  / / /____  /    ');
  Wait(100);
  Writeln('   \/_______//______/_/ /_/_/______/_/__/_/_/____/ /     ');
  Wait(100);
  Writeln('                             \/___________________/      ');
  Wait(100);
  Writeln(PadR('               Draynor Chop N'' Bank ~ Version ' + SCRIPT_VERSION + '!', 57));
end;

procedure DCnB_Debug(proc, msg: String; debug: Integer);
begin
  case debug of
    DEBUG_ERROR:
      Writeln('ERROR: ' + proc + ': ' + msg);

    DEBUG_SUCCESS:
      Writeln('SUCCESS: ' + proc + ': ' + msg);

    DEBUG_DETAILS:
      Writeln('DETAIL: ' + proc + ': ' + msg);

    DEBUG_PLAYER:
      Writeln('PLAYER: ' + proc + ': ' + Capitalize(Players[CurrentPlayer].nickname) + ': ' + msg);

    else
      DCnB_Debug('DCnB_Debug', 'Invalid debug choice', DEBUG_ERROR);
  end;
end;

procedure Load_Antiban;
begin
  case Random(200) of
    10: RandomRClickItem();
    20: MouseOffClient(Random(5));
    30: RandomCompass(0, 180, false);
    40: PickUpMouse;
    50: ;
    60: MouseMovingObject();
    70: SleepAndMoveMouse(200 + Random(50));
    90: PickUpMouse();
    100: ;
  end;
end;

function Load_TreeRecords: TTree;
begin
  case Lowercase(Players[CurrentPlayer].Strings[P_TREE]) of
    'oak':
      with Result do
      begin
        Name   := 'Oak';
        UpText := ['Oak'];
        Color  := 1450785;
        Hue    := 1.29;
        Sat    := 2.43;
        Exp    := 37.5;
        Tol    := 2;
        Symbol := MM_SYMBOL_BANK;
        OffsetX := 30;
        OffsetY := 0;
      end;

    'willow':
      with Result do
      begin
        Name   := 'Willow';
        UpText := ['Willow', 'Wil', 'llow', 'low'];
        Color  := 2441281;
        Hue    := 0.36;
        Sat    := 1.01;
        Exp    := 67.5;
        Tol    := 6;
        Symbol := MM_SYMBOL_FISHING;
        OffsetX := 5;
        OffsetY := -10;
      end;

    else
      DCnB_Debug('Load_TreeRecords', 'Invalid tree type in DeclarePlayers', DEBUG_ERROR);
  end;
end;

procedure Find_Randoms();
var
  p: TPoint;
begin
  if (findSpinTicket(p)) then
  begin
    DCnB_Debug('Find_Randoms', 'Claiming spin ticket', DEBUG_DETAILS);
    mouse(p, MOUSE_LEFT);
  end;

  closeAdWindow();
end;

function Find_PlayerLocation: String;
var
  dist: Integer;
  p: TPoint;
begin
  if (Lowercase(Players[CurrentPlayer].Strings[P_TREE]) = 'willow') then
  begin
    if (minimap.findSymbol(p, MM_SYMBOL_FISHING, minimap.getBounds())) then
    begin
      dist := Distance(p, minimap.getCenterPoint());
      DCnB_Debug('Find_PlayerLocation', 'Symbol Distance = ' + IntToStr(dist), DEBUG_DETAILS);

      if (dist > 50) then
        Result := 'Bank'
      else
        Result := 'Willows';

    end else
      Result := 'Bank';

  end else
    if (minimap.findSymbol(p, MM_SYMBOL_DUNGEON, minimap.getBounds())) then
      Result := 'Oaks'
    else
      Result := 'Bank';

  DCnB_Debug('Find_PlayerLocation', 'Location = ' + Result, DEBUG_PLAYER);
end;

procedure Next_Player(active: Boolean; proc, msg: String);
begin
  if (bankscreen.isOpen()) then
    bankscreen.close()();

  if (not active) then
  begin
    DCnB_Debug(proc, msg, DEBUG_ERROR);
    Players[CurrentPlayer].location := 'Lost';
    falseReason[CurrentPlayer] := msg;
  end else
    DCnB_Debug(proc, msg, DEBUG_DETAILS);

  if (players.getActive() <= 0) then
  begin
    DCnB_Debug('Next_Player', 'All players inactive', DEBUG_SUCCESS);
    TerminateScript;
  end;

  players.next(active);
  Players[CurrentPlayer].location := Find_PlayerLocation;
  playerLoads := 0;
end;

procedure Next_Break;
begin
  if (not isLoggedIn()) then
    Exit;

  if (bankscreen.isOpen()) then
    bankscreen.close();

  Inc(Players[CurrentPlayer].Integers[P_BREAKS]);

  if (length(players) > 1) and (players.getActive() > 1) then
    Next_Player(True, 'Next_Break', 'Switching players...')
  else begin
    DCnB_Debug('Next_Break', 'Taking a short break...', DEBUG_DETAILS);
    players[currentPlayer].logout();
    Wait(RandomRange(780000, 1020000)); // 15 +/- random 2 minutes

    DCnB_Debug('Next_Break', 'Break over, logging back in...', DEBUG_DETAILS);
    players[currentPlayer].login();
  end;
end;

function Chop_Relocate(tree: TTree): boolean;
var
  p: TPoint;
  tmpAcc: extended = minimap.symbolAccuracy;
begin
  DcnB_Debug('Chop_Relocate', 'Relocating to trees', DEBUG_DETAILS);
  minimap.symbolAccuracy := 0.6;

  if (minimap.findSymbol(p, tree.symbol, minimap.getBounds())) then
  begin
    p.offset(point(tree.offsetX, tree.offsetY));
    Mouse(p.rand(4), MOUSE_LEFT);
    Result := minimap.waitFlag(0);
  end;

  minimap.symbolAccuracy := tmpAcc;
end;

function Chop_Finished: Boolean;
var
  avg, c: integer;
begin
  if not isLoggedIn() then
    Exit;

  if (tabBackpack.isFull()) then
  begin
    result := true;
    exit;
  end;

  {$IFDEF SMART}
  if (SMART_DRAWING) then
    smartImage.drawBox(mainscreen.playerBox, false, clRed);
  {$ENDIF}

  repeat
    avg := getPixelShiftAverage(mainscreen.playerBox, 100, 300);
    DCnB_Debug('Chop_IsTreeDown', 'Average pixel shift: ' + intToStr(avg), DEBUG_DETAILS);

    if (inRange(avg, 0, ANIMATION_SHIFT)) then
    begin
      Inc(c);

      if (c = 1) then
        Continue;
    end else
      c := 0;

    if (c >= 2) or (tabBackpack.isFull()) then
    begin
      Result := True;
      DCnB_Debug('Chop_IsTreeDown', 'Player not animating', DEBUG_DETAILS);
      Break;
    end;

    Load_Antiban;
    Find_Randoms;
  until(isLoggedIn() = false);
end;

// Returns the middle element of the TPA
function Chop_MiddlePoint(TPA: TPointArray): TPoint;
var
  l := Length(TPA);
begin
  if (l > 0) then
    Result := TPA[Round(Length(TPA) div 2)];
end;

function Chop_Trees: Boolean;
var
  notFindTrees, notFindUptext, i, h, t, x, y, c: Integer;
  colorsArr: TPointArray;
  cP, msc: TPoint;
  boxesArr, tmpATPA: T2DPointArray;
  Tree: TTree;
  doneChopping: Boolean;
begin
  if (not isLoggedIn()) then
    Exit;

  Tree := Load_TreeRecords;

  SetColorToleranceSpeed(2);
  SetToleranceSpeed2Modifiers(Tree.Hue, Tree.Sat);

  repeat
    if (tabBackpack.isFull()) then
      Break;

    msc := mainscreen.getCenterPoint();
    FindColorsSpiralTolerance(msc.x, msc.y, colorsArr, Tree.Color, mainscreen.getBounds(), Tree.Tol);
    tmpATPA := TPAToATPA(colorsArr, 20);
    //DCnB_Debug('Chop_Trees', 'Boxes Found: ' + IntToStr(Length(boxesArr)), DEBUG_DETAILS);

    if (Length(tmpATPA) = 0) then
    begin
      DCnB_Debug('Chop_Trees', 'Failed to find tree', DEBUG_ERROR);
      Inc(notFindTrees);
      wait(500 + random(500));
    end;

    SortATPAFrom(tmpATPA, mainscreen.getCenterPoint());
    SetLength(boxesArr, Length(tmpATPA));
    h := High(tmpATPA);
    c := 0;

    for i := 0 to h do
    begin
      //DCnB_Debug('Chop_Trees', 'Length tmpATPA[' + IntToStr(i) + ']: ' + IntToStr(Length(tmpATPA[i])), DEBUG_DETAILS);

      if (Length(tmpATPA[i]) < 250) then
        Continue;

      if (PointInBox(MiddleTPA(tmpATPA[i]), mainscreen.playerBox)) then
        Continue;

      //DCnB_Debug('Chop_Trees', 'Length tmpATPA[' + IntToStr(i) + ']: ' + IntToStr(Length(tmpATPA[i])), DEBUG_DETAILS);
      boxesArr[c] := tmpATPA[i];
      Inc(c);
    end;

    SetLength(boxesArr, c);

    if (length(boxesArr) <= 0) then
    begin
      DCnB_Debug('Chop_Trees', 'Failed to find enough colors for tree', DEBUG_ERROR);
      inc(notFindTrees);
    end;

    SortATPAFrom(boxesArr, mainscreen.getCenterPoint());
    h := high(boxesArr);

    // draw points on SMART if setting enabled
    {$IFDEF SMART}
    if (SMART_DRAWING) then
    begin
      smartImage.clear();

      for i := 0 to high(boxesArr) do
        smartImage.drawBox(boxesArr[i].getBounds(), false, clYellow);
    end;
    {$ENDIF}

    for i := 0 to h do
    begin
      cP := Chop_MiddlePoint(boxesArr[i]);
      mouse(cP.rand(4), MOUSE_MOVE);
      notFindTrees := 0;

      if (isMouseOverText(Tree.UpText, 300)) then
      begin
        DCnB_Debug('Chop_Trees', 'MouseOverText found!', DEBUG_DETAILS);
        notFindUptext := 0;

        GetMousePos(x, y);
        Mouse(point(x, y), MOUSE_LEFT);

        if (not didClick(true)) then
          Continue;

        Wait(RandomRange(2000, 3000));

        t := GetSystemTime + (MAX_TIME_PER_TREE * 1000) + RandomRange(-10000, 10000);
        doneChopping := false;

        DCnB_Debug('Chop_Trees', 'Waiting for player to finish animating...', DEBUG_DETAILS);

        repeat
          doneChopping := Chop_Finished;

          if (doneChopping or (GetSystemTime > t)) then
            Break;

          Load_Antiban;
        until(tabBackpack.isFull() or (not isLoggedIn()));

        if (tabBackpack.isFull() or doneChopping) then
          Break;

      end else begin
        DCnB_Debug('Chop_Tree', 'Failed to find mouseOverText', DEBUG_ERROR);
        Inc(notFindUptext);
      end;
    end; // end of TPA loop.

    Result := tabBackpack.isFull();

    if (not Result) then
      if (notFindTrees >= 20) or (notFindUptext > 5) then
        if (Chop_Relocate(tree)) then
        begin
          notFindTrees := 0;
          notFindUptext := 0;
        end;

  until(Result or (not isLoggedIn()) or (notFindTrees >= 60) or (notFindUptext >= 60));

  if (notFindTrees >= 60) then
    Next_Player(False, 'Chop_Trees', 'Failed to find trees 60 times');

  if (notFindUptext >= 120) then
    Next_Player(False, 'Chop_Trees', 'Failed to find uptext 120 times');

  SetToleranceSpeed2Modifiers(0.2, 0.2);
  SetColorToleranceSpeed(1);
end;

function Walk_ConstToLoc(which: Integer): String;
begin
  case which of
    WALK_TREES_WILLOWS:
      Result := 'Willows';

    WALK_TREES_OAKS:
      Result := 'Oaks';

    WALK_BANK_WILLOWS, WALK_BANK_OAKS:
      Result := 'Bank';

    else
      DCnB_Debug('Walk_ConstToLoc', 'Invalid location', DEBUG_ERROR);
  end;
end;

function Walk_ToLoc(which: Integer): Boolean;
begin
  if (not isLoggedIn()) then
    Exit;

  minimap.toggleRun(20);
  if (InRange(minimap.getAngleDegrees(), 10.0, 350.0)) then
  begin
    minimap.clickCompass();
    mainscreen.setAngle(MS_ANGLE_HIGH)
  end;

  if (Players[CurrentPlayer].location = Walk_ConstToLoc(which)) then
  begin
    Result := True;
    Exit;
  end else
    case which of
      WALK_TREES_WILLOWS:
        MouseBox(intToBox(660, 150, 680, 175), MOUSE_LEFT);

      WALK_TREES_OAKS:
        begin
          MouseBox(intToBox(656, 90, 665, 105), MOUSE_LEFT);
          mainscreen.setAngle(MS_ANGLE_LOW);
        end;

      WALK_BANK_WILLOWS:
        MouseBox(intToBox(700, 55, 720, 75), MOUSE_LEFT);

      WALK_BANK_OAKS:
        begin
          MouseBox(intToBox(583, 78, 607, 87), MOUSE_LEFT);
          mainscreen.setAngle(MS_ANGLE_HIGH);
        end;

      else
        DCnB_Debug('Walk_ToLoc', 'Invalid walk point', DEBUG_ERROR);
    end;

  Wait(RandomRange(2000, 3000));
  result := minimap.waitFlag(10) and (not minimap.isPlayerMoving());
  Wait(500 + Random(500));
  Players[CurrentPlayer].location := Walk_ConstToLoc(which);
  DCnB_Debug('Walk_ToLoc', 'Walked to location: ' + Walk_ConstToLoc(which), DEBUG_SUCCESS);
end;

function Bank_Logs: Boolean;
var
  logsInInv, Tries, t, x, y: Integer;
  sP: TPoint;
  Tree: TTree;
begin
  if (not isLoggedIn()) or (tabBackpack.count() <= 1) then
    Exit;

  t := GetSystemTime + RandomRange(8000, 12000);
  Tree := Load_TreeRecords;

  repeat
    if (Players[CurrentPlayer].Booleans[P_EQUIPPED]) then
      logsInInv := tabBackpack.count()
    else
      logsInInv := tabBackpack.count() - 1;

    Find_Randoms();

    if (not mainscreen.findObject(x, y, [4284262], [8], colorSetting(2, 0.10, 0.28), mainscreen.getCenterPoint(), 50, 200, 1000, ['Bank'], mainscreen.getBounds(), MOUSE_LEFT)) then
    begin
      DCnB_Debug('Bank_Logs', 'Failed to open bank, retrying...', DEBUG_ERROR);
      Inc(Tries);

      if (Tries >= 20) then
      begin
        minimap.symbolAccuracy := 0.5;

        if minimap.findSymbol(sP, MM_SYMBOL_BANK, minimap.getBounds()) then
        begin
          DCnB_Debug('Bank_Logs', 'Found bank symbol! Relocating...', DEBUG_SUCCESS);
          Mouse(sP.rand(4), MOUSE_LEFT);

          while (minimap.isPlayerMoving() and (GetSystemTime < t)) do
            Wait(RandomRange(100, 300));
        end else
          DCnB_Debug('Bank_Logs', 'Failed to find bank symbol', DEBUG_ERROR);

        Continue;
      end;
    end else begin
      t := getSystemTime() + 10000;

      while (getSystemTime() < t) and (not bankscreen.isOpen()) and (not pinscreen.isOpen()) do
        wait(100);
    end;

    if (pinscreen.isOpen()) then
      pinscreen.enter(Players[CurrentPlayer].bankPin);

    if (bankscreen.isOpen()) then
    begin
      DCnB_Debug('Bank_Logs', 'Successfully opened bank!', DEBUG_SUCCESS);

      if (Players[CurrentPlayer].Booleans[P_EQUIPPED]) then
        Result := bankscreen.quickDeposit(QUICK_DEPOSIT_INVENTORY)
      else begin
        Result := bankscreen.deposit([2..28]);
        bankscreen.close();
      end;

    end else
      DCnB_Debug('Bank_Logs', 'Failed to find bank screen', DEBUG_ERROR);

  until(Result or (not isLoggedIn()) or (Tries >= 22));

  if (Tries >= 22) then
    Next_Player(True, 'Bank_Logs', 'Failed to open bank after 40 tries');

  if (Result) then
  begin
    DCnB_Debug('Bank_Logs', 'Successfully banked logs!', DEBUG_SUCCESS);
    Inc(playerLoads);

    with Players[CurrentPlayer] do
    begin
      Integers[P_LOGS] := Integers[P_LOGS] + logsInInv;
      Integers[P_LOADS] := Integers[P_LOADS] + 1;
      Integers[P_EXP] := Round(Integers[P_LOGS] * Tree.Exp);
    end;

    if (Tree.Name = 'Willow') then
      statsIncVariable('Willow Logs Chopped', logsInInv)
    else
      statsIncVariable('Oak Logs Chopped', logsInInv);

    statsIncVariable('Total EXP Gained', Round(logsInInv * Tree.Exp));

    with Players[CurrentPlayer] do
      if (Integers[P_LOGS] >= Integers[P_TOTAL_LOGS]) then
        Next_Player(False, 'Bank_Logs', 'Cut desired number of logs');
  end;
end;

function Report_GetTotals: TStringArray;
var
  i: Integer;
  temp: TIntegerArray;
begin
  SetLength(temp, 5);
  SetLength(Result, Length(temp));

  for i := 0 to High(Players) do
    with Players[i] do
    begin
      IncEx(temp[0], Integers[P_LOADS]);
      IncEx(temp[1], Integers[P_LOGS]);
      IncEx(temp[2], Integers[P_LEVELS]);
      IncEx(temp[3], Integers[P_EXP]);
      IncEx(temp[4], Integers[P_BREAKS]);
    end;

  for i := 0 to High(temp) do
    Result[i] := GroupDigits(temp[i], ',');
end;

procedure Report_MultiPlayer;
var
  i: Integer;
  s: TStringArray;
  playerFalse: Boolean;
begin
  s := Report_GetTotals;
  Writeln('/=======================================================================================|'); //88
  Writeln(PadR('|                          Coh3n''s Draynor Chop N'' Bank!', 88) + '|');
  Writeln(PadR('|                                 - Revision ' + SCRIPT_VERSION + ' -', 88) + '|');
  Writeln('|=======================================================================================|');
  Writeln(PadR('|                    Ran for: ' + TimeRunning, 88) + '|');
  Writeln('|────── ──────── ──────────── ─────── ──────── ────────── ──────── ──────────── ────────|');
  Writeln('| Nick | Active | Location   | Loads |  Tree  | Logs Cut | Levels | Experience | Breaks |');
  Writeln('|────── ──────── ──────────── ─────── ──────── ────────── ──────── ──────────── ────────|');

  for i := 0 to High(Players) do
    with Players[i] do
      Writeln('| ' + PadR(nickname, 5) + '| ' + PadR(BoolToStr(isActive), 7) + '| '
                        + PadR(location, 11) + '|  ' + PadR(GroupDigits(Integers[P_LOADS], ','), 5) + '| '
                        + PadR(Capitalize(Strings[P_TREE]), 7) + '|  ' + PadR(GroupDigits(Integers[P_LOGS], ','), 8) + '|   '
                        + PadR(IntToStr(Integers[P_LEVELS]), 5) + '|  ' + PadR(GroupDigits(Integers[P_EXP], ','), 10) + '|   '
                        + PadR(IntToStr(Integers[P_BREAKS]), 5) + '|');

  Writeln('|───────────────────────────────────────────────────────────────────────────────────────|');
  Writeln(PadR('| Totals:', 29) + '|  ' + PadR(s[0], 5) + '|        |  ' + PadR(s[1], 8) + '|   '
                    + PadR(s[2], 5) + '|  ' + PadR(s[3], 10) + '|   ' + PadR(s[4], 5) + '|');
  Writeln('|_______________________________________________________________________________________|');

  // checks to see if at least one player is false
  for i := 0 to High(Players) do
    if (not Players[i].isActive) then
    begin
      playerFalse := True;
      Break;
    end;

  if (playerFalse) then
  begin
    Writeln('|                                                                                       |');
    Writeln('| False Reasons:                                                                        |');
    Writeln('| ──────────────                                                                        |');

    if (Length(Players) > 0) and (Length(falseReason) > 0) then
      for i := 0 to High(Players) do
        if (not Players[i].isActive) then
          with Players[i] do
            Writeln(PadR('|   ' + IntToStr(i) + ': ' + nickname + ' -> ' + falseReason[i], 88) + '|');
  end;

  Writeln('|_______________________________________________________________________________________/');
end;

procedure Report_SinglePlayer;
begin
  Writeln('/====================================================|');
  Writeln(PadR('|           Coh3n''s Draynor Chop N'' Bank!', 53) + '|');
  Writeln('|                  - Revision ' + SCRIPT_VERSION + ' -                   |');
  Writeln('|====================================================|');
  Writeln(PadR('|        ' + TimeRunning, 53) + '|');
  Writeln('|────────────────────────────────────────────────────|');

  if (Length(Players) > 0) then
    with Players[CurrentPlayer] do
    begin
      Writeln(PadR('|    Player:   ' + ToStr(CurrentPlayer), 53) + '|');
      Writeln(PadR('|    Location: ' + Capitalize(location), 53) + '|');
      Writeln(PadR('|    Active:   ' + BoolToStr(isActive), 53) + '|');
      if (not isActive) then
        Writeln(PadR('|    Reason:   ' + falseReason[CurrentPlayer], 53) + '|');

      Writeln(PadR('|      Tree Type:  ' + Capitalize(Strings[P_TREE]), 53) + '|');
      Writeln(PadR('|      Loads Done: ' + GroupDigits(Integers[P_LOADS], ','), 53) + '|');
      Writeln(PadR('|      Logs Cut:   ' + GroupDigits(Integers[P_LOGS], ','), 53) + '|');
      Writeln(PadR('|      Logs P/H:   ' + GroupDigits(Round((Integers[P_LOGS] * 60 * 60) / (GetTimeRunning / 1000)), ','), 53) + '|');
      Writeln(PadR('|      Levels Up:  ' + IntToStr(Integers[P_LEVELS]), 53) + '|');
      Writeln(PadR('|      Experience: ' + GroupDigits(Integers[P_EXP], ','), 53) + '|');
      Writeln(PadR('|      Breaks:     ' + IntToStr(Integers[P_BREAKS]), 53) + '|');
    end;

  Writeln('|____________________________________________________|');
  Writeln('|____________________________________________________/');
end;

procedure Report_Print;
var
  i: Integer;
begin
  SetScriptProp(SP_WriteTimeStamp, [False]);
  ClearDebug();

  if (length(players) = 1) then
    Report_SinglePlayer
  else
    if (length(players) > 1) then
      Report_MultiPlayer
    else
      if (length(players) < 1) then
      begin
        Report_SinglePlayer;
        Report_MultiPlayer;
      end;

  if (Length(Players) > 0) then
    for i := P_LOADS to P_BREAKS do
      if (Players[CurrentPlayer].Integers[i] > 0) then
        Players[CurrentPlayer].Integers[i] := Players[CurrentPlayer].Integers[i]
      else
        Players[CurrentPlayer].Integers[i] := 0;

  SetScriptProp(SP_WriteTimeStamp, [True]);
end;

procedure Event_OnLogin();
begin
  exitSquealOfFortune();
end;

procedure Setup_Player;
begin
  players[currentPlayer].login();

  Players[CurrentPlayer].location := Find_PlayerLocation;
  mainscreen.setAngle(MS_ANGLE_HIGH);

  DCnB_Debug('Setup_Player', 'Current Woodcutting level: ' + IntToStr(tabStats.getSkillLevel(SKILL_WOODCUTTING)), DEBUG_PLAYER);
end;

procedure Setup_Script;
var
  i: Integer;
  sName, sPass: string;
begin
  SetScriptProp(SP_WriteTimeStamp, [True]);
  DCnB_Signature;

  sName := STATS_ID;
  sPass := STATS_PASS;
  breakAfter := BREAK_AFTER;

  smartEnableDrawing := SMART_DRAWING;
  disableSRLLog := (not SRL_LOG);
  disableIPScreenshots := (not IP_SCREEN);
  disableSRLDebug := (not SRL_DEBUG);

  SRL_Events[EVENT_LOGIN] := @Event_OnLogin;
  SetupSRL;
  {$IFNDEF SMART}ActivateClient;{$ENDIF}
  statsSetup(34, sName, sPass);

  DeclarePlayers;

  Disguise('Logs Chopped: 0');
  Writeln('Loading, please wait...');
  minimap.symbolAccuracy := 0.5;

  SetLength(falseReason, length(players));
  for i := 0 to High(Players) do
  with Players[i] do
  begin
    if (not isActive) then
      falseReason[i] := 'User set to false';

    location := 'Bank';
  end;
end;

procedure Setup_MainLoop;
var
  totalLogs, i: Integer;
begin
  Setup_Script;

  repeat
    Setup_Player;

    repeat
      if (Lowercase(Players[CurrentPlayer].Strings[P_TREE]) = 'willow') then
        Walk_ToLoc(WALK_TREES_WILLOWS)
      else
        Walk_ToLoc(WALK_TREES_OAKS);

      while (not tabBackpack.isFull()) and (isLoggedIn()) do
        Chop_Trees;

      if (tabBackpack.isFull()) then
      begin
        if (Lowercase(Players[CurrentPlayer].Strings[P_TREE]) = 'willow') then
          Walk_ToLoc(WALK_BANK_WILLOWS)
        else
          Walk_ToLoc(WALK_BANK_OAKS);

        if (Bank_Logs) then
        begin
          Report_Print;

          for i := 0 to High(Players) do
            totalLogs := totalLogs + Players[i].Integers[P_LOGS];

          Disguise('Logs Chopped: ' + IntToStr(totalLogs));
          totalLogs := 0;

          if (Players[CurrentPlayer].Booleans[P_TAKE_BREAKS]) then
            if (playerLoads >= (breakAfter + RandomRange(-2, 2))) then
            begin
              Next_Break;
              playerLoads := 0;
              Setup_Player;
            end;
        end;

        statsCommit;
      end;
    until((Players[CurrentPlayer].Integers[P_LOGS] >= Players[CurrentPlayer].Integers[P_TOTAL_LOGS]) or (not isLoggedIn()));

    if (not isLoggedIn()) then
    begin
      players[currentPlayer].login();
      Continue;
    end;
  until(players.getActive() <= 0);
end;

procedure ScriptTerminate;
begin
  //Report_Print;
end;

begin
  AddOnTerminate('ScriptTerminate');
  Setup_MainLoop;
end.

{==============================================================================\
|                  Copyright 2009-2013 Coh3n @ SRL-Forums                      |
|==============================================================================}
